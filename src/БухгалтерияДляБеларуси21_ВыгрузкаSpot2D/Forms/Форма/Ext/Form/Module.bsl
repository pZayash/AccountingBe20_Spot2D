#Область ОбработчикиСобытийФормы 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	обработкаОбъект = РеквизитФормыВЗначение("Объект"); 
	
	обработкаОбъект.Инициализировать();
	
	обработкаОбъект.ОтборКомпоновкиСпискаНоменклатуры_Заполнить(СписокНоменклатуры.Отбор);
	
	ЗначениеВРеквизитФормы(обработкаОбъект, "Объект");
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка) 
	
	Если Не ЗавершениеРаботы Тогда
		СохранитьНастройкиНаСервере();
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиСобытийЭлементовФормы

&НаСервере
Функция НоменклатураСписокНаСервере()

	Возврат ДинамическийСписок_в_ТабличныйДокумент(Элементы.СписокНоменклатуры); 

КонецФункции

&НаКлиенте
Процедура НоменклатураСписок(Команда)

	табДок = НоменклатураСписокНаСервере();
	имяФайла = "Список номенклатуры для выгрузки в spot2D";
	табДок.Показать(имяФайла, имяФайла);

КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы   

#Область Команды

&НаКлиенте
Процедура ПериодМинус45Дней(Команда)
	
	ПериодВыгрузки_УстановитьНаСервере(Объект.ПериодВыгрузки.ДатаОкончания, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПлюс45Дней(Команда)
	
	ПериодВыгрузки_УстановитьНаСервере(Объект.ПериодВыгрузки.ДатаНачала, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПериодВыгрузки_УстановитьНаСервере(пДата = Неопределено, пОтДатыОкончания = Истина)
	
	обработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	обработкаОбъект.ПериодВыгрузки_Установить(пДата, пОтДатыОкончания);
	
	ЗначениеВРеквизитФормы(обработкаОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьНаСервере()
	
	обработкаОбъект = РеквизитФормыВЗначение("Объект");
	обработкаОбъект.СохранитьНастройки(Элементы.СписокНоменклатуры);
	обработкаОбъект.ВыполнитьКоманду("Выгрузить");
	ЗначениеВРеквизитФормы(обработкаОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	ВыгрузитьНаСервере();
КонецПроцедуры

&НаСервере
Процедура СоздатьСодержимоеФайловНаСервере()
	
	обработкаОбъект = РеквизитФормыВЗначение("Объект");
	обработкаОбъект.СохранитьНастройки(Элементы.СписокНоменклатуры);
	обработкаОбъект.СоздатьСодержимоеФайлов();
	ЗначениеВРеквизитФормы(обработкаОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСодержимоеФайлов(Команда)
	СоздатьСодержимоеФайловНаСервере();
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиНаСервере()
	
	обработкаОбъект = РеквизитФормыВЗначение("Объект");
	обработкаОбъект.СохранитьНастройки(Элементы.СписокНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(Команда)
	СохранитьНастройкиНаСервере();
КонецПроцедуры 

&НаКлиенте
Асинх Процедура СохранитьФайлыВАрхив(Команда)

	диалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	обещаниеВыбораКаталога = диалогВыбораКаталога.ВыбратьАсинх();
	массивИменКаталогов = Ждать обещаниеВыбораКаталога; 
	
	Если массивИменКаталогов = Неопределено Или массивИменКаталогов.Количество() = 0 Тогда
		Возврат;
		
	КонецЕсли;
	
	выбранныйКаталог = массивИменКаталогов[0];
	
	имяАрхива = 
		СтрШаблон(
			"%1\ID_дистрибьютора %2 с %3 по %4 (v %5).zip",
			выбранныйКаталог, // %1
			Объект.ID_дистрибьютора, // %2
			Формат(Объект.ПериодВыгрузки.ДатаНачала, Объект.ФорматнаяСтрокаДат), // %3
			Формат(Объект.ПериодВыгрузки.ДатаОкончания, Объект.ФорматнаяСтрокаДат), // %4
			Объект.ВерсияОбъекта // %5
			);
			
	записьZIP = Новый ЗаписьZipФайла(имяАрхива);

	Для Каждого рядОчереди Из Объект.Очередь Цикл 
		текстовыйДокумент = Новый ТекстовыйДокумент;
		текстовыйДокумент.УстановитьТекст(рядОчереди.СодержимоеФайла);
		полноеИмяФайла = выбранныйКаталог + "\" + рядОчереди.ИмяФайла + ".csv";
		обещаниеЗаписи = текстовыйДокумент.ЗаписатьАсинх(выбранныйКаталог + "\" + рядОчереди.ИмяФайла + ".csv");
		Ждать обещаниеЗаписи; 
		
		записьZIP.Добавить(полноеИмяФайла);
		
	КонецЦикла;
	рядОчереди = Неопределено;
	
	записьZIP.Записать();
	
КонецПроцедуры

#КонецОбласти // Команды  

#Область общ  
#Если Сервер Тогда
	
Функция ДинамическийСписок_в_ТабличныйДокумент(пЭлементФормыДинамическийСписок) Экспорт 
	
	исполняемаяСКД = пЭлементФормыДинамическийСписок.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	настройкиСКД = пЭлементФормыДинамическийСписок.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	табДок = СКД_Выполнить(исполняемаяСКД, настройкиСКД);
	
	Возврат табДок;
	
КонецФункции

Функция ДинамическийСписок_в_ТЗ(пЭлементФормыДинамическийСписок) Экспорт 
	
	тзРезультат = Новый ТаблицаЗначений;
	исполняемаяСКД = пЭлементФормыДинамическийСписок.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	настройкиСКД = пЭлементФормыДинамическийСписок.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();

	СКД_Выполнить(исполняемаяСКД, настройкиСКД, тзРезультат);
	
	Возврат тзРезультат;
	
КонецФункции 

// @ Заменить методы СКД_СкомпоноватьРезультатОтчета И ОтчетОбъект_ПолучитьРезультат
//
// Выполняет компоновку СКД по переданным настройкам в таблицу значений, табличный документ, или дерево значений
//  Результат будет помещен в первый параметр
//  Взято на https://infostart.ru/public/1082944
//
// Параметры:
//  пСКД			 - СхемаКомпоновкиДанных													 - выполняемая СКД
//  пНастройкиСКД	 - НастройкиКомпоновкиДанных, КомпоновщикНастроекКомпоновкиДанных, Строка	 - выполняемые настройки или адрес временного хранилища или компоновщик с настройками
//  пРезультат		 - ТабличныйДокумент, ТаблицаЗначений, ДеревоЗначений						 - результат выполнения
//  пПрочиеПараметры - Структура, Неопределено													 - дополнительные параметры
//		* ДанныеРасшифровки							- ДанныеРасшифровкиКомпоновкиДанных - данные расшифровки
//		* ВнешниеНаборыДанных						- Структура - коллекция внешних наборов данных
//		* МакетОформления							- МакетОформленияКомпоновкиДанных - Макет оформления, в соответствии с которым необходимо оформлять макет компоновки данных.
//		* ПроверятьДоступностьПолей					- Булево - Определяет, выполнять ли проверку прав на просмотр полей и проверку доступности поля во включенных функциональных возможностях.
//		* ПараметрыФункциональныхОпций				- Булево - Содержит параметры функциональных опций, используемые при исполнении отчета.
//		* ВозможностьИспользованияВнешнихФункций	- Булево - Указывает возможность использования функции общих модулей конфигурации в выражениях компоновки данных.
// 
// Возвращаемое значение:
// ТабличныйДокумент, ТаблицаЗначений - результат будет помещен в парамет пРезультат и возвращен. 
//	Если пРезультат = Неопределено, то ему будет присвоен тип ТабличныйДокумент
//
Функция СКД_Выполнить(пСКД, пНастройкиСКД, пРезультат = Неопределено, пПрочиеПараметры = Неопределено) Экспорт
	
	Если пРезультат = Неопределено Тогда
		пРезультат = Новый ТабличныйДокумент;
		
	КонецЕсли;
	
	//Инициализируем настройки
	Если ТипЗнч(пНастройкиСКД) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ВыполняемыеНастройки = пНастройкиСКД.ПолучитьНастройки();
	ИначеЕсли ТипЗнч(пНастройкиСКД) = Тип("Строка") И ЭтоАдресВременногоХранилища(пНастройкиСКД) Тогда
		ВыполняемыеНастройки = ПолучитьИзВременногоХранилища(пНастройкиСКД);
	Иначе 
		ВыполняемыеНастройки = пНастройкиСКД;
	КонецЕсли;
	
	Если НЕ ТипЗнч(ВыполняемыеНастройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		ВызватьИсключение "Отсутствуют выполняемые настройки компоновки данных";
	КонецЕсли;

	//Инициализируем дополнительные параметры вывода 
	параметрыСКД = Новый Структура;
	параметрыСКД.Вставить("ВнешниеНаборыДанных", Неопределено);
	параметрыСКД.Вставить("ВозможностьИспользованияВнешнихФункций", Ложь);
	параметрыСКД.Вставить("ДанныеРасшифровки", Неопределено);
	параметрыСКД.Вставить("МакетОформления", Неопределено);
	параметрыСКД.Вставить("ПроверятьДоступностьПолей", Истина);
	параметрыСКД.Вставить("ПараметрыФункциональныхОпций", Новый Структура);
	
	Если ТипЗнч(пПрочиеПараметры) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(параметрыСКД, пПрочиеПараметры);
		
	КонецЕсли;
	
	//Определяем тип генератора
	Если ТипЗнч(пРезультат) = Тип("ТаблицаЗначений") ИЛИ ТипЗнч(пРезультат) = Тип("ДеревоЗначений") Тогда
		процессорВыводаКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		процессорВыводаКД.УстановитьОбъект(пРезультат);
		ТипГенератораВывода = Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений");
		
	Иначе
		процессорВыводаКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		процессорВыводаКД.УстановитьДокумент(пРезультат);
		ТипГенератораВывода = Тип("ГенераторМакетаКомпоновкиДанных");
		
	КонецЕсли;
	
	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	//Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = 
		КомпоновщикМакета.Выполнить(
			пСКД, 
			ВыполняемыеНастройки, 
			параметрыСКД.ДанныеРасшифровки, 
			параметрыСКД.МакетОформления, 
			ТипГенератораВывода, 
			параметрыСКД.ПроверятьДоступностьПолей, 
			параметрыСКД.ПараметрыФункциональныхОпций
			);
	
	//Выполним компоновку с помощью процессора компоновки
	процессорКД = Новый ПроцессорКомпоновкиДанных;
	процессорКД.Инициализировать(
		МакетКомпоновки, 
		параметрыСКД.ВнешниеНаборыДанных, 
		параметрыСКД.ДанныеРасшифровки, 
		параметрыСКД.ВозможностьИспользованияВнешнихФункций
		);
	
	//Выводим результат
	процессорВыводаКД.Вывести(процессорКД); 
	
	Возврат пРезультат;
	
КонецФункции

#КонецЕсли // Если Сервер Тогда

#КонецОбласти // общ