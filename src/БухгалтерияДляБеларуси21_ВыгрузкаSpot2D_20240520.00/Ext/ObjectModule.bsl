Перем мНастройкаКомпоновкиСпискаНоменклатуры;
Перем мСхемаКомпоновкиСпискаНоменклатуры;

#Область ВнешнийИнтефейс 

Процедура ВыполнитьКоманду(ИдентификаторКоманды = "Выгрузить", ПараметрыКоманды = Неопределено) Экспорт
	
	Инициализировать();
	
	Если ИдентификаторКоманды = ИмяКоманды_ВыгрузитьВФоне() Тогда 

		// Спец настройки для фоновой выгрузки
		ПериодВыгрузки_Установить();
		ВыгрузитьВсе();

	ИначеЕсли ИдентификаторКоманды = "Выгрузить" Тогда
		ВыгрузитьВсе();
		
	КонецЕсли; 

КонецПроцедуры // ВыполнитьКоманду

#КонецОбласти // ВнешнийИнтерфейс

#Область СлужебныйИнтерфейс

Процедура ВосстановитьНастройки() Экспорт
	
	// Восстановить сохраненные настройки
	структураНастроек = Новый Структура;
	структураНастроек = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(КлючОбъекта(), КлючНастроек(), структураНастроек, , "");
	
	массивИсключенныйСвойств = Новый Массив;
	
	стрИсключаяСвойства = СтрСоединить(массивИсключенныйСвойств, ",");
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, структураНастроек, , стрИсключаяСвойства); 
	
	Если структураНастроек.Свойство("СхемаКомпоновкиСпискаНоменклатуры") Тогда
		мСхемаКомпоновкиСпискаНоменклатуры = структураНастроек.СхемаКомпоновкиСпискаНоменклатуры;
		
	КонецЕсли;
	
	Если структураНастроек.Свойство("НастройкаКомпоновкиСпискаНоменклатуры") Тогда
		мНастройкаКомпоновкиСпискаНоменклатуры = структураНастроек.НастройкаКомпоновкиСпискаНоменклатуры;
		
	КонецЕсли;

КонецПроцедуры

Процедура Инициализировать() Экспорт 
	
	ФорматнаяСтрокаДат = "ДФ=yyyy-MM-dd"; 
	ВерсияОбъекта = СведенияОВнешнейОбработке().Версия;
	
	списокИменФайлов = Новый СписокЗначений;
	списокИменФайлов.Добавить(ИмяФайла_delivery());
	списокИменФайлов.Добавить(ИмяФайла_stocks());
	списокИменФайлов.Добавить(ИмяФайла_ttoptions());
	// списокИменФайлов.Добавить(ИмяФайла_ta()); // Не реализовано
	списокИменФайлов.Добавить(ИмяФайла_sku());
	списокИменФайлов.Добавить(ИмяФайла_receive());
	списокИменФайлов.Добавить(ИмяФайла_cancellations()); // Не реализовано
		
	Очередь.Очистить(); 
	
	Для Каждого элементСписка Из списокИменФайлов Цикл
		рядОчереди = Очередь.Добавить();
		рядОчереди.ИмяФайла = элементСписка.Значение;
		
	КонецЦикла;
	элементСписка = Неопределено; 
	
	// Настройки по умолчанию
	ПериодВыгрузки_Установить();
	
	ВосстановитьНастройки();
	
КонецПроцедуры 

Процедура ОтборКомпоновкиСпискаНоменклатуры_Заполнить(пОтборПриемник) Экспорт
	
	Если ТипЗнч(мНастройкаКомпоновкиСпискаНоменклатуры) = Тип("НастройкиКомпоновкиДанных") Тогда
		ОтборСКД_Копировать(пОтборПриемник, мНастройкаКомпоновкиСпискаНоменклатуры.Отбор); 
		
	КонецЕсли;

КонецПроцедуры

Процедура СоздатьСодержимоеФайлов() Экспорт 
	
	ВосстановитьНастройки();
	
	запрос = Новый Запрос;
	запрос.УстановитьПараметр("ID_дистрибьютора", ID_дистрибьютора);
	запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ПериодВыгрузки.ДатаНачала));
	запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ПериодВыгрузки.ДатаОкончания)-1); // Конец прошлого дня 
	запрос.УстановитьПараметр("Счет41_1", ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
	мвт = Новый МенеджерВременныхТаблиц;
	запрос.МенеджерВременныхТаблиц = мвт;
	
	// Инициализировать вспомогательные временные таблицы
	тзОтборНоменклатуры = СКД_в_ТЗ(мСхемаКомпоновкиСпискаНоменклатуры, мНастройкаКомпоновкиСпискаНоменклатуры);
	запрос.УстановитьПараметр("тзОтборНоменклатуры", тзОтборНоменклатуры); 

	// Создать последовательность дат циклом, чтобы не городить создание последовательности запросом
	тзДатыПоследовательность = Новый ТаблицаЗначений;
	тзДатыПоследовательность.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	дата = КонецДня(запрос.Параметры.ДатаНачала);
	Пока дата <= запрос.Параметры.ДатаОкончания Цикл
		рядТзДаты = тзДатыПоследовательность.Добавить();
		рядТзДаты.Дата = НачалоДня(дата);
		дата = КонецДня(дата + 3600*24); // Добавить день к дате
		
	КонецЦикла;
	дата = Неопределено;
	
	запрос.УстановитьПараметр("тзДатыПоследовательность", тзДатыПоследовательность);

	запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(т.Ссылка КАК Справочник.Номенклатура) КАК Ссылка
	|ПОМЕСТИТЬ отборНоменклатуры
	|ИЗ
	|	&тзОтборНоменклатуры КАК т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(т.Ссылка КАК Справочник.Номенклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(д.Дата КАК ДАТА) КАК Дата
	|ПОМЕСТИТЬ датыПоследовательность
	|ИЗ
	|	&тзДатыПоследовательность КАК д
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(д.Дата КАК ДАТА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	отборНоменклатуры.Ссылка КАК Номенклатура,
	|	отборНоменклатуры.Ссылка.Код КАК Код_продукта_дистрибьютора,
	|	НАЧАЛОПЕРИОДА(даты.Дата, ДЕНЬ) КАК Дата
	|ПОМЕСТИТЬ матрица
	|ИЗ
	|	отборНоменклатуры КАК отборНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ датыПоследовательность КАК даты
	|		ПО (ИСТИНА)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(матрица.Код_продукта_дистрибьютора) КАК Код_продукта_дистрибьютора,
	|	матрица.Дата КАК Дата
	|ПОМЕСТИТЬ перваяНоменклатура
	|ИЗ
	|	матрица КАК матрица
	|
	|СГРУППИРОВАТЬ ПО
	|	матрица.Дата
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	матрица.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РТУ.Ссылка КАК Ссылка,
	|	РТУ.Дата КАК Дата,
	|	РТУ.Контрагент КАК Клиент,
	|	ВЫРАЗИТЬ(РТУ.ПунктРазгрузки КАК СТРОКА(256)) КАК Адрес_ТТ,
	|	РТУ.СерияБланка.Код + РТУ.НомерНакладной КАК Номер_расходной_накладной
	|ПОМЕСТИТЬ документыРеализации
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РТУ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РТУТовары
	|		ПО РТУ.Ссылка = РТУТовары.Ссылка
	|			И (РТУТовары.Номенклатура В
	|				(ВЫБРАТЬ
	|					отборНоменклатуры.Ссылка
	|				ИЗ
	|					отборНоменклатуры КАК отборНоменклатуры))
	|ГДЕ
	|	РТУ.Дата >= &ДатаНачала
	|	И РТУ.Дата < &ДатаОкончания
	|	И РТУ.Проведен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РТУ.Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РТУ.Клиент КАК Клиент,
	|	РТУ.Клиент.ИНН КАК Код_ИНН,
	|	ВЫРАЗИТЬ(РТУ.Клиент.Код + ""#"" + РТУ.Клиент.Код КАК СТРОКА(128)) КАК Код_клиента_ERP,
	|	ВЫРАЗИТЬ(РТУ.Клиент.НаименованиеПолное КАК СТРОКА(128)) КАК Название_клиента,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ЕСТЬNULL(ЮрАдрес.Представление, """") КАК СТРОКА(256))) КАК Адрес_клиента
	|ПОМЕСТИТЬ клиенты
	|ИЗ
	|	документыРеализации КАК РТУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ЮрАдрес
	|		ПО РТУ.Клиент = ЮрАдрес.Ссылка
	|			И (ЮрАдрес.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И (ЮрАдрес.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента))
	|
	|СГРУППИРОВАТЬ ПО
	|	РТУ.Клиент,
	|	ВЫРАЗИТЬ(РТУ.Клиент.НаименованиеПолное КАК СТРОКА(128)),
	|	РТУ.Клиент.ИНН,
	|	ВЫРАЗИТЬ(РТУ.Клиент.Код + ""#"" + РТУ.Клиент.Код КАК СТРОКА(128))"; 
	
	запрос.Выполнить(); // Инициализация временных таблиц
	
	// Создать содержимое
	Для Каждого рядОчереди Из Очередь Цикл 
		запрос.Текст = ТекстЗапроса(рядОчереди.ИмяФайла); 
		тз = запрос.Выполнить().Выгрузить();
		
		параметрыCSV = Новый Структура;
		параметрыCSV.Вставить("ФорматДат", ФорматнаяСтрокаДат);
		параметрыCSV.Вставить("ВосстановитьПробелыВИменахКолонок", Истина);
		стрCSV = ТЗ_в_CSV(тз, , параметрыCSV);
		рядОчереди.СодержимоеФайла = стрCSV;
		
	КонецЦикла; 
	рядОчереди = Неопределено;	
		
КонецПроцедуры

Процедура СохранитьНастройки(пЭлементФормыДинамическийСписок = Неопределено) Экспорт
	
	массивИменСохраняемыхРеквизитов = Новый Массив;
	массивИменСохраняемыхРеквизитов.Добавить(ЭтотОбъект.Метаданные().Реквизиты.ID_дистрибьютора.Имя);
	массивИменСохраняемыхРеквизитов.Добавить(ЭтотОбъект.Метаданные().Реквизиты.Пользователь.Имя);
	массивИменСохраняемыхРеквизитов.Добавить(ЭтотОбъект.Метаданные().Реквизиты.Пароль.Имя);
	
	структураНастроек = Новый Структура;
	
	Для Каждого имяСохраняемогоРеквизита Из массивИменСохраняемыхРеквизитов Цикл
		значениеРеквизита = ЭтотОбъект[имяСохраняемогоРеквизита];
		структураНастроек.Вставить(имяСохраняемогоРеквизита, ЭтотОбъект[имяСохраняемогоРеквизита]);
		
	КонецЦикла;
	имяСохраняемогоРеквизита = Неопределено;
	
	// Отдельно сохранить настройки компоновщика
	Если ТипЗнч(пЭлементФормыДинамическийСписок) = Тип("ТаблицаФормы") Тогда
		структураНастроек.Вставить("НастройкаКомпоновкиСпискаНоменклатуры", пЭлементФормыДинамическийСписок.ПолучитьИсполняемыеНастройкиКомпоновкиДанных());
		структураНастроек.Вставить("СхемаКомпоновкиСпискаНоменклатуры", пЭлементФормыДинамическийСписок.ПолучитьИсполняемуюСхемуКомпоновкиДанных());
		
	КонецЕсли;

	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(КлючОбъекта(), КлючНастроек(), структураНастроек, , ""); 

КонецПроцедуры  

#КонецОбласти // СлужебныйИнтерфейс 

#Область СлужебныйИнтерфейсВнешнейОбработки 

Функция СведенияОВнешнейОбработке() Экспорт 
	
	параметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
	
	// Чтобы синтаксический контроль не ругался на метод Метаданные()
	// Получить его через "Выполнить"
	наименование = Неопределено;
	версия = Неопределено;
	Выполнить 
	"наименование = ЭтотОбъект.Метаданные().Синоним;
	|версия = ЭтотОбъект.Метаданные().Комментарий";
	параметрыРегистрации.Наименование = наименование;
	параметрыРегистрации.БезопасныйРежим = Ложь;
	параметрыРегистрации.Версия = версия;
	
	вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	параметрыРегистрации.Вид = вид;
	параметрыРегистрации.Информация = СтрШаблон("%1 %2", вид, наименование);
	
	ДобавитьКоманду(параметрыРегистрации.Команды, наименование, "ОткрытьОбработку", "ОткрытиеФормы", Истина); 
	ДобавитьКоманду(параметрыРегистрации.Команды, наименование + " (в фоне)", ИмяКоманды_ВыгрузитьВФоне(), "ВызовСерверногоМетода", Истина);
	
	Возврат параметрыРегистрации; 
	
КонецФункции // СведенияОВнешнейОбработке  

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование = "ОткрытиеФормы", ПоказыватьОповещение = Ложь, Модификатор = "ПечатьMXL")
	
	// Добавляем команду в таблицу команд по переданному описанию.
	// Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры 

#КонецОбласти // СлужебныйИнтерфейсВнешнейОбработки 

#Область Выгрузка

Процедура ВыгрузитьВсе() 
	
	УстановитьПривилегированныйРежим(Истина); 
	
	ВЖурнал("Выгрузка", "Начало выгрузки");

	Если Не ПроверкиПередВыгрузкой() Тогда
		Перейти ~ВыгрузитьВсе_Конец;
		
	КонецЕсли; 
	
	СоздатьСодержимоеФайлов();
	
	// Отправить файлы
	Для Каждого рядОчереди Из Очередь Цикл
		ОтправитьВSpot2D(рядОчереди.ИмяФайла, рядОчереди.СодержимоеФайла);
		
	КонецЦикла;
	рядОчереди = Неопределено;
	
	~ВыгрузитьВсе_Конец:
	
	ВЖурнал("Выгрузка", "Завершение выгрузки"); 
		
КонецПроцедуры // Выгрузка 

Функция ПроверкиПередВыгрузкой() 
	
	этоФоновое = ЭтоФоновоеЗадание();
	
	коллекцияОшибок = Новый Структура;
	
	Если Не ЗначениеЗаполнено(ID_дистрибьютора) Тогда
		коллекцияОшибок.Вставить(
			ЭтотОбъект.Метаданные().Реквизиты.ID_дистрибьютора.Имя,
			"Не заполнен код дистрибютора"
			);
			
	КонецЕсли;
	
	Для Каждого пара Из коллекцияОшибок Цикл 
		имяРеквизита = пара.Ключ;
		стрОшибка = пара.Значение;
		
		ОшибкаВЖурнал("ПроверкиПередВыгрузкой", стрОшибка);
			
		сообщ = Новый СообщениеПользователю;
		сообщ.Поле = имяРеквизита;
		сообщ.Текст = стрОшибка;
		сообщ.Сообщить();
		
		// В фоновом задании вызвать метод "Сообщить", чтобы в консоли можно было прочесть ошибки
		Если этоФоновое Тогда
			Сообщить(стрОшибка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	проверкаПройдена = коллекцияОшибок.Количество() = 0;
	
	Возврат проверкаПройдена;
	
КонецФункции

Функция ТекстЗапроса(пИмяФайла)
	
	Если Ложь Тогда 
		
	ИначеЕсли пИмяФайла = ИмяФайла_cancellations() Тогда
		
		//Описание таблицы:		
		//Название столбца				Формат			Комментарий
		//id дистрибьютора				Integer			Код дистрибьютора в системе SPOT2D, указан в теле письма
		//Дата							Date			фактическая дата проведения операции в одном из указанных форматов: dd.mm.yy, dd-mm-yy, dd.m.yy, dd-mm-yyyy, dd.mm.yyyy, dd-m-yyyy, yyyy.mm.dd, yyyy-mm-dd, yyyy-m-dd, yyyy-m-d, yyyy-mm-d
		//Код продукта дистрибьютора	String (128)	Внутренний код продукта из УС дистрибьютора. 
		//Количество					Float			Количество в единицах измерения продукции. Для операций, уменьшающих остаток продукции, необходимо использовать отрицательные значения: - исходящие перемещения, - списание/недостача. Для операций, увеличивающих остаток, необходимо использовать положительные значения: - входящие перемещения, - излишек.
		//Номер документа				String (128)	Номер операции в учетной системе дистрибьютора
		
		Возврат
			"ВЫБРАТЬ
			|	&ID_дистрибьютора КАК id_дистрибьютора,
			|	перваяНоменклатура.Дата КАК Дата,
			|	ВЫРАЗИТЬ(перваяНоменклатура.Код_продукта_дистрибьютора КАК СТРОКА(128)) КАК Код_продукта_дистрибьютора,
			|	0 КАК Количество,
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(128)) КАК Номер_документа
			|ИЗ
			|	перваяНоменклатура КАК перваяНоменклатура
			|
			|УПОРЯДОЧИТЬ ПО
			|	Дата,
			|	Код_продукта_дистрибьютора" 

	ИначеЕсли пИмяФайла = ИмяФайла_delivery() Тогда 
		// Данные об обороте продукции (отгрузки на ТТ, возвраты с ТТ, корректировочный СФ) 
		// загружаются на сайт ежедневно за период со вчера и минус 45 дней 
		// (например, если файлы формируются 15.02.2015, тогда delivery должен содержать информацию 
		// за период с 1.01.2015 по 14.02.2015 включительно).
		// В файл не должны попадать списания, перемещения, пересортица и другие операции инвентаризации.
		// Обратите внимание, что необходимо создать возможность задавать период выгружаемых данных, 
		// так как будут ситуации, когда нужно выгрузить информацию более чем за 45 дней (исторические данные).
		
		//Описание таблицы:
		//
		//Название заголовка			Формат			Комментарий
		//id дистрибьютора				Integer			Код дистрибьютора в системе SPOT 2D, указан в теле письма
		//Код клиента ERP				String (128)	Уникальный код связки кода клиента (контрагента) и кода торговой точки (точки доставки).  
		//													Детально описание см. в файле ttoptions.csv
		//Дата							Date			фактическая дата отгрузки или возврата в ТТ в одном из указанных форматов: 
		//													dd.mm.yy, dd-mm-yy, dd.m.yy, dd-mm-yyyy, dd.mm.yyyy, dd-m-yyyy, yyyy.mm.dd, yyyy-mm-dd, yyyy-m-dd, yyyy-m-d, yyyy-mm-d
		//Код продукта дистрибьютора	String (128)	Внутренний код продукта из УС дистрибьютора. 
		//Количество					Float			Размер отгрузки в единицах измерения продукции. Возврат со знаком минус.
		//Сумма отгрузки				Float			Стоимость всей отгрузки/возврата в национальной валюте без НДС. Сумма возврата со знаком минус.
		//Сумма отгрузки с НДС			Float			Стоимость всей отгрузки/возврата в национальной валюте c НДС. Сумма возврата со знаком минус.
		//Код ТА						String (64)		Код торгового представителя или агента (ТА) на которого зачислена продажа, 
		//													если к продаже не привязан ТА необходимо оставить поле пустым.
		//Номер расходной накладной		String (128)	Номер расходной или возвратной накладной из УС дистрибьютора. Пустые значения не допускаются.

		Возврат 
			"ВЫБРАТЬ
			|	&ID_дистрибьютора КАК id_дистрибьютора,
			|	клиенты.Код_клиента_ERP КАК Код_клиента_ERP,
			|	рту.Дата КАК Дата,
			|	Товары.Номенклатура.Код КАК Код_продукта_дистрибьютора,
			|	Товары.Количество КАК Количество,
			|	Товары.Сумма КАК Сумма_отгрузки,
			|	Товары.Сумма + Товары.СуммаНДС КАК Сумма_отгрузки_с_НДС,
			|	"""" КАК Код_ТА,
			|	рту.Номер_расходной_накладной КАК Номер_расходной_накладной
			|ИЗ
			|	документыРеализации КАК рту
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ клиенты КАК клиенты
			|		ПО рту.Клиент = клиенты.Клиент
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК Товары
			|		ПО рту.Ссылка = Товары.Ссылка
			|			И (Товары.Номенклатура В
			|				(ВЫБРАТЬ
			|					отборНоменклатуры.Ссылка
			|				ИЗ
			|					отборНоменклатуры КАК отборНоменклатуры))" 
		
	ИначеЕсли пИмяФайла = ИмяФайла_receive() Тогда
		//Файл должен включать информацию о приходах товара от производителя, а также возвраты со склада дистрибьютора на склад производителя. 
		//
		//Данные о приходах и возвратах загружаются на сайт ежедневно за период со вчера и минус 45 дней.
		//Пример импорта: файлы выгружаются на сайт 15.02.2015, тогда receive должен содержать информацию за период с 1.01.2015 по14.02.2015 включительно.  
		//
		//Файл должен содержать 45 дат. Если в какой-либо день нет прихода, то необходимо включить эту дату в файл 
		// с нулевым значением в количестве по любому коду СКЮ из файла sku.csv.
		//
		//Описание таблицы:		
		//		
		//Название заголовка			Формат			Комментарий
		//id дистрибьютора				Integer			Код дистрибьютора в системе SPOT 2D, указан в теле письма
		//Дата							Date			фактическая дата прихода товара на склад дистрибьютора 
		//												или дата возврата на склад производителя в одном из указанных форматов: 
		//												dd.mm.yy, dd-mm-yy, dd.m.yy, dd-mm-yyyy, dd.mm.yyyy, dd-m-yyyy, yyyy.mm.dd, yyyy-mm-dd, yyyy-m-dd, yyyy-m-d, yyyy-mm-d
		//Код продукта дистрибьютора	String (128)	Внутренний код продукта из УС дистрибьютора. 
		//Количество					Float			Размер прихода или возврата в единицах измерения продукции. Возвраты со знаком минус.
		//Номер накладной				String (128)	Номер приходной накладной от производителя или номер возвратной накладной

		Возврат
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ(Обороты.Субконто1 КАК Справочник.Номенклатура).Код КАК Код_продукта_дистрибьютора,
			|	НАЧАЛОПЕРИОДА(Обороты.Период, ДЕНЬ) КАК Дата,
			|	СУММА(Обороты.КоличествоОборотДт) КАК Количество,
			|	ВЫРАЗИТЬ(Обороты.Регистратор КАК Документ.ПоступлениеТоваровУслуг).Номер КАК Номер_накладной
			|ПОМЕСТИТЬ поступления
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Обороты(
			|			&ДатаНачала,
			|			&ДатаОкончания,
			|			Регистратор,
			|			Счет = &Счет41_1,
			|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура),
			|			Субконто1 В
			|				(ВЫБРАТЬ
			|					о.Ссылка
			|				ИЗ
			|					отборНоменклатуры КАК о),
			|			,
			|			) КАК Обороты
			|ГДЕ
			|	Обороты.КоличествоОборотДт <> 0
			|
			|СГРУППИРОВАТЬ ПО
			|	ВЫРАЗИТЬ(Обороты.Субконто1 КАК Справочник.Номенклатура).Код,
			|	НАЧАЛОПЕРИОДА(Обороты.Период, ДЕНЬ),
			|	ВЫРАЗИТЬ(Обороты.Регистратор КАК Документ.ПоступлениеТоваровУслуг).Номер
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Дата
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	&ID_дистрибьютора КАК id_дистрибьютора,
			|	ВЫРАЗИТЬ(перваяНоменклатура.Дата КАК ДАТА) КАК Дата,
			|	ВЫРАЗИТЬ(ЕСТЬNULL(поступления.Код_продукта_дистрибьютора, перваяНоменклатура.Код_продукта_дистрибьютора) КАК СТРОКА(128)) КАК Код_продукта_дистрибьютора,
			|	ЕСТЬNULL(поступления.Количество, 0) КАК Количество,
			|	ВЫРАЗИТЬ(ЕСТЬNULL(поступления.Номер_накладной, """") КАК СТРОКА(128)) КАК Номер_накладной
			|ИЗ
			|	перваяНоменклатура КАК перваяНоменклатура
			|		ЛЕВОЕ СОЕДИНЕНИЕ поступления КАК поступления
			|		ПО перваяНоменклатура.Дата = поступления.Дата
			|
			|УПОРЯДОЧИТЬ ПО
			|	Дата,
			|	Код_продукта_дистрибьютора";
		
	ИначеЕсли пИмяФайла = ИмяФайла_sku() Тогда
		// Файл sku.csv должен содержать список продукции производителя, по которому настраивается выгрузка данных.
		// Обратите внимание, что для новых продуктов запрещено использовать коды старых продуктов.
		//
		//Описание таблицы:
		//
		//Название заголовка			Формат			Комментарий
		//id дистрибьютора				Integer			Код дистрибьютора в системе SPOT 2D, указан в теле письма
		//Код продукта дистрибьютора	String (128)	Внутренний код продукта из УС дистрибьютора.  Коды продуктов должны быть уникальными.
		//Название продукта				String (128)	Название продукта в Вашей учетной системе
		//Штрихкод						String (128)	Штрихкод товара производителя (EAN)
		//Код продукта производителя	String (128)	Код товара Производителя (если ведется учет в кодах производителя)
		//id единицы измерения продукта	Integer			Id единицы измерения производителя: штуки –1, ящики – 2, килограммы – 3, дополнительная единица -4

		Возврат
			"ВЫБРАТЬ
			|	ЕИ.Ссылка КАК Ссылка,
			|	ВЫРАЗИТЬ(ВЫБОР
			|			КОГДА ЕИ.Код = ""796"" // шт
			|				ТОГДА 1
			|			КОГДА ЕИ.Код = ""778"" // упак
			|				ТОГДА 2
			|			КОГДА ЕИ.Код = ""166"" // кг
			|				ТОГДА 3
			|			ИНАЧЕ 2 // все остальное считаем ящиками
			|		КОНЕЦ КАК ЧИСЛО(1, 0)) КАК id_единицы_измерения_продукта
			|ПОМЕСТИТЬ еи
			|ИЗ
			|	Справочник.КлассификаторЕдиницИзмерения КАК ЕИ
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ЕИ.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	&ID_дистрибьютора КАК id_дистрибьютора,
			|	Номенклатура.Код КАК Код_продукта_дистрибьютора,
			|	Номенклатура.Наименование КАК Название_продукта,
			|	"""" КАК Штрихкод,
			|	"""" КАК Код_продукта_производителя,
			|	ВЫРАЗИТЬ(ЕСТЬNULL(еи.id_единицы_измерения_продукта, 0) КАК ЧИСЛО(1, 0)) КАК id_единицы_измерения_продукта
			|ИЗ
			|	отборНоменклатуры КАК отбор
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
			|		ПО отбор.Ссылка = Номенклатура.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ еи КАК еи
			|		ПО (Номенклатура.ЕдиницаИзмерения = еи.Ссылка)" 
		
	ИначеЕсли пИмяФайла = ИмяФайла_stocks() Тогда
		// Файл должен содержать 45 дат. 
		// Если в какой-либо день на остатках нет товара, то необходимо включить эту дату в файл с нулевым значением остатка в количестве 
		// по любому коду СКЮ из файла Данные об остатках загружаются на сайт ежедневно за период со вчера и минус 45 дней. 
		// В файле необходимо отображать ежедневные остатки на конец дня по каждому продукту за период 45 дней.
		//
		//Отрицательные остатки необходимо исключить из файла.
		//
		//Пример: файлы выгружаются на сайт 15.02.2015, тогда stocks должен содержать информацию на конец каждого дня 
		// за период с 1.01.2015 по 14.02.2015 включительно.
		// 
		//Описание таблицы:
		//
		//Название заголовка			Формат			Комментарий
		//id дистрибьютора				Integer			Код дистрибьютора в системе SPOT 2D, указан в теле письма
		//Дата							Date			фактическая дата остатка в одном из указанных форматов: dd.mm.yy, dd-mm-yy, dd.m.yy, dd-mm-yyyy, dd.mm.yyyy, dd-m-yyyy, yyyy.mm.dd, yyyy-mm-dd, yyyy-m-dd, yyyy-m-d, yyyy-mm-d
		//Код продукта дистрибьютора	String (128)	Внутренний код продукта из УС дистрибьютора. 
		//Количество					Float			Размер остатков на конец каждого дня в единицах измерения продукции. Отрицательные остатки выгружать запрещено.

		Возврат 
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ(отборНоменклатуры.Ссылка КАК Справочник.Номенклатура) КАК Номенклатура,
			|	ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0) КАК Количество
			|ПОМЕСТИТЬ остаткиНачальные
			|ИЗ
			|	отборНоменклатуры КАК отборНоменклатуры
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
			|				&ДатаНачала,
			|				Счет = &Счет41_1,
			|				,
			|				Субконто1 В
			|					(ВЫБРАТЬ
			|						отборНоменклатуры.Ссылка
			|					ИЗ
			|						отборНоменклатуры КАК отборНоменклатуры)) КАК Остатки
			|		ПО отборНоменклатуры.Ссылка = Остатки.Субконто1
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВЫРАЗИТЬ(Обороты.Субконто1 КАК Справочник.Номенклатура) КАК Номенклатура,
			|	Обороты.Период КАК Дата,
			|	Обороты.КоличествоОборот КАК Количество
			|ПОМЕСТИТЬ обороты
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Обороты(
			|			&ДатаНачала,
			|			&ДатаОкончания,
			|			День,
			|			Счет = &Счет41_1,
			|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура),
			|			Субконто1 В
			|				(ВЫБРАТЬ
			|					о.Ссылка
			|				ИЗ
			|					отборНоменклатуры КАК о),
			|			,
			|			) КАК Обороты
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Дата
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	матрица.Номенклатура КАК Номенклатура,
			|	матрица.Дата КАК Дата,
			|	СУММА(обороты.Количество) КАК Количество
			|ПОМЕСТИТЬ оборотыНарастающие
			|ИЗ
			|	матрица КАК матрица
			|		ЛЕВОЕ СОЕДИНЕНИЕ обороты КАК обороты
			|		ПО матрица.Номенклатура = обороты.Номенклатура
			|			И матрица.Дата >= обороты.Дата
			|
			|СГРУППИРОВАТЬ ПО
			|	матрица.Номенклатура,
			|	матрица.Дата
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(оборотыНарастающие.Номенклатура, остаткиНачальные.Номенклатура) КАК Номенклатура,
			|	ЕСТЬNULL(оборотыНарастающие.Дата, &ДатаНачала) КАК Дата,
			|	СУММА(ЕСТЬNULL(оборотыНарастающие.Количество, 0) + ЕСТЬNULL(остаткиНачальные.Количество, 0)) КАК Количество
			|ПОМЕСТИТЬ остатки
			|ИЗ
			|	оборотыНарастающие КАК оборотыНарастающие
			|		ПОЛНОЕ СОЕДИНЕНИЕ остаткиНачальные КАК остаткиНачальные
			|		ПО оборотыНарастающие.Номенклатура = остаткиНачальные.Номенклатура
			|
			|СГРУППИРОВАТЬ ПО
			|	ЕСТЬNULL(оборотыНарастающие.Номенклатура, остаткиНачальные.Номенклатура),
			|	ЕСТЬNULL(оборотыНарастающие.Дата, &ДатаНачала)
			|
			|ИМЕЮЩИЕ
			|	СУММА(ЕСТЬNULL(оборотыНарастающие.Количество, 0) + ЕСТЬNULL(остаткиНачальные.Количество, 0)) > 0
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Дата
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	&ID_дистрибьютора КАК id_дистрибьютора,
			|	ВЫРАЗИТЬ(матрица.Дата КАК ДАТА) КАК Дата,
			|	ВЫРАЗИТЬ(матрица.Код_продукта_дистрибьютора КАК СТРОКА(128)) КАК Код_продукта_дистрибьютора,
			|	ЕСТЬNULL(остатки.Количество, 0) КАК Количество
			|ИЗ
			|	матрица КАК матрица
			|		ЛЕВОЕ СОЕДИНЕНИЕ остатки КАК остатки
			|		ПО матрица.Номенклатура = остатки.Номенклатура
			|			И матрица.Дата = остатки.Дата
			|			И (остатки.Количество > 0)
			|ГДЕ
			|	ЕСТЬNULL(остатки.Количество, 0) <> 0
			|
			|УПОРЯДОЧИТЬ ПО
			|	Код_продукта_дистрибьютора,
			|	Дата";
		
		
	ИначеЕсли пИмяФайла = ИмяФайла_ta() Тогда
		НеРеализовано();
		
		//Описание таблицы:
		//
		//Название заголовка	Формат			Комментарий
		//id дистрибьютора		Integer			Код дистрибьютора в системе SPOT 2D, указан в теле письма
		//Код ТА				String (64)		Уникальный код торгового представителя/агента(ТА) в системе дистрибьютора
		//Имя ТА				String (128)	Уникальное название ТА

		Возврат
			"ВЫБРАТЬ
			|	&ID_дистрибьютора КАК id_дистрибьютора,
			|	т.Код_ТА КАК Код_ТА,
			|	т.Имя_ТА КАК Имя_ТА
			|ИЗ
			|	&Т КАК т" 
		
	ИначеЕсли пИмяФайла = ИмяФайла_ttoptions() Тогда
		
		//Описание таблицы:
		//
		//Название заголовка	Формат (размер)	Комментарий
		//id дистрибьютора		Integer			Код дистрибьютора в системе SPOT 2D, указан в теле письма.
		//Код клиента ERP		String (128)	Уникальный код связки кода клиента (контрагента) и кода торговой точки (точки доставки).
		//											Пример правильного кода XXXXXXX#YYYYYY Где,  
		//												XXXXXXX – код клиента (контрагента) 
		//												YYYYYY – код торговой точки (точки доставки) 
		//												# - разделитель # без пробелов. Например, 2599#3727 
		//											Если в системе дистрибутора есть только один из кодов (клиента или торговой точки доставки), 
		//											то формат связки кода должен выгружаться в виде XXXXXXX#XXXXXXX или YYYYYY#YYYYYY
		//Название клиента		String (128)	Юридическое название клиента (контрагента).Например, Абишева А.М. ИП или Ашан Ритейл
		//Адрес клиента			String (256)	Юридический адрес клиента (контрагента).   Необходимый формат адресной строки: Индекс, Страна, Область, Населенный пункт, Улица, номер дома Если какой-либо части адреса нет, то ее необходимо пропустить, не нарушая порядок следования. Допускаются общепринятые сокращение обл, р-н, ул, д. и тд.  Пример правильного формата адресной строки: 142400, Казахстан, Актюбинская обл, г Ногинск, ул Соборная, д 12 Или 142400, Казахстан, Актюбинская обл, Ногинск, ул Соборная, 12  Если в базе не заведен юр.адрес - выгружать фразу "Юр.адрес не заведен"
		//Название ТТ			String (128)	Юр. название клиента (контрагента) + название торговой точки доставки Например: Абишева А.М. ИП магазин «Людмила» или Ашан Ритейл, гипермаркет №3
		//Адрес ТТ				String (256)	Фактический адрес точки доставки (адрес грузополучателя).  Необходимый формат адресной строки: Индекс, Страна, Область, Населенный пункт, Улица, номер дома Если какой-либо части адреса нет, то ее необходимо пропустить, не нарушая порядок следования. Допускаются общепринятые сокращение обл, р-н, ул, д. и тд.  Пример правильного формата адресной строки: 142400, Казахстан, Актюбинская обл, г Ногинск, ул Соборная, д 12 Или 142400, Казахстан, Актюбинская обл, Ногинск, ул Соборная, 12  Если в базе не заведен адрес точки доставки - выгружать фразу "Самовывоз" или адрес склада.
		//Код ИНН				Integer			Идентификационный номер налогоплательщика - клиента (контрагента). Должен содержать минимум 9 цифр, максимум -12. В случае, если кода ИНН нет в Вашей системе, ячейку можно оставить пустой.
		//Сегмент				String (256) 	Необходимо указать к какому сегменту относиться ТТ: Ритейл, Хорека, Пищевые производства, Оптовый канал, другое (все что не входит в список).Если данная информация не ведется в учетной системе, поле можно оставить пустым. 

		Возврат
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	&ID_дистрибьютора КАК id_дистрибьютора,
			|	клиенты.Код_клиента_ERP КАК Код_клиента_ERP,
			|	клиенты.Название_клиента КАК Название_клиента,
			|	клиенты.Адрес_клиента КАК Адрес_клиента,
			|	клиенты.Название_клиента КАК Название_ТТ,
			|	клиенты.Адрес_клиента КАК Адрес_ТТ,
			|	клиенты.Код_ИНН КАК Код_ИНН,
			|	"""" КАК Сегмент
			|ИЗ
			|	документыРеализации КАК рту
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ клиенты КАК клиенты
			|		ПО рту.Клиент = клиенты.Клиент" 
		
	КонецЕсли; // Если пИмяФайла = ...
	
КонецФункции

Функция ОтправитьВSpot2D(пИмяФайла, пСодержимоеФайла) 

	граница = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	стрЗапрос = 
		СтрШаблон(
			"--%1
			|Content-Disposition: form-data; name=""__login""
			|
			|%2
			|--%1
			|Content-Disposition: form-data; name=""__password""
			|
			|%3
			|--%1
			|Content-Disposition: form-data; name=""__did""
			|
			|%4
			|--%1
			|Content-Disposition: form-data; name=""ufile""; filename=""%5.csv""
			|Content-Type: text/plain
			|
			|%6
			|--%1--",
			граница, // %1 
			Пользователь, // %2
			Пароль, // %3
			ID_дистрибьютора, // %4
			пИмяФайла, // %5
			пСодержимоеФайла, // %6
			);
	
	заголовки = Новый Соответствие();
	заголовки.Вставить("Content-Type","multipart/form-data; boundary=" + граница);
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса(), заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(стрЗапрос, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать); 

	соединение = Новый HTTPСоединение(АдресСервера());
	отправлено = Ложь; 

	Попытка 
		ответ = соединение.ОтправитьДляОбработки(HTTPЗапрос); 
		отправлено = ответ.КодСостояния >= 200 И ответ.КодСостояния < 300;

	Исключение 
		отправлено = Ложь;
		
		ЗаписьЖурналаРегистрации(
			ЭтотОбъект.Метаданные().Синоним + ".ОтправитьВSpot2D",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
			);
		
		// Обработка ошибок здесь.
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				"Ошибка при отправке файла по причине
				|%1",
				ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
				)
			);
		
	КонецПопытки;
	
	Возврат отправлено;
	
КонецФункции

Процедура ВЖурнал(пСобытие = "", пОписаниесобытия, пУровеньЖурнала = Неопределено)
	
	Если ТипЗнч(пУровеньЖурнала) <> Тип("УровеньЖурналаРегистрации") Тогда
		пУровеньЖурнала = УровеньЖурналаРегистрации.Информация;
		
	КонецЕсли; 
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(пСобытие),
		пУровеньЖурнала,
		ЭтотОбъект.Метаданные(),
		, // Данные
		пОписаниесобытия,
		РежимТранзакцииЗаписиЖурналаРегистрации.Независимая
		);
	
	// В фоновом задании вызвать метод "Сообщить", чтобы информацию можно было достать методом "ПолучитьСообщенияПользователю"
	Если ЭтоФоновоеЗадание() Тогда
		стрСообщение = 
			СтрШаблон(
				"%1 %2: %3",
				Формат(ТекущаяДатаСеанса(), "ДЛФ=T"), // %1
				пСобытие, // %2
				пОписаниесобытия // %3
				);
			
		Сообщить(стрСообщение);
		
	КонецЕсли;

КонецПроцедуры 

Процедура ОшибкаВЖурнал(пСобытие, пОписаниеОшибки)
	
	ВЖурнал(пСобытие, пОписаниеОшибки, УровеньЖурналаРегистрации.Ошибка);
	
КонецПроцедуры

#КонецОбласти // Выгрузка

#Область ВолшебныеЧислаДвижка

Функция АдресРесурса()
	
	Возврат "/upload/auto";
	
КонецФункции

Функция АдресСервера()
	
	Возврат "osq.mdata.report";
	
КонецФункции

Функция ИмяКоманды_ВыгрузитьВФоне()
	
	Возврат "ВыгрузитьВФоне";
	
КонецФункции  

Функция ИмяСобытияЖурналаРегистрации(пДополнительноеИмя = "") 
	
	имяСобытия = ЭтотОбъект.Метаданные().Имя;
	
	Если Не ПустаяСтрока(пДополнительноеИмя) Тогда
		имяСобытия = СтрШаблон("%1.%2", имяСобытия, пДополнительноеИмя);
		
	КонецЕсли;
	
	Возврат имяСобытия;
	
КонецФункции  

Функция КлючОбъекта()
	
	Возврат ЭтотОбъект.Метаданные().Имя;
	
КонецФункции

Функция КлючНастроек() 
	
	Возврат "СтруктураНастроек";
	
КонецФункции 

#КонецОбласти // ВолшебныеЧислаДвижка

#Область ВолшебныеЧислаДанных

Функция ИмяФайла_cancellations()
	
	Возврат "cancellations";
	
КонецФункции

Функция ИмяФайла_delivery()
	
	Возврат "delivery";
	
КонецФункции

Функция ИмяФайла_receive()
	
	Возврат "receive";
	
КонецФункции

Функция ИмяФайла_sku()
	
	Возврат "sku";
	
КонецФункции

Функция ИмяФайла_stocks()
	
	Возврат "stocks";
	
КонецФункции

Функция ИмяФайла_ta()
	
	Возврат "ta";
	
КонецФункции

Функция ИмяФайла_ttoptions()
	
	Возврат "ttoptions";
	
КонецФункции

Процедура ПериодВыгрузки_Установить(Знач пДата = Неопределено, пОтДатыОкончания = Истина) Экспорт
	
	ПериодВыгрузки.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
	
	Если пДата = Неопределено Тогда 
		Если пОтДатыОкончания Тогда
			пДата = ТекущаяДатаСеанса() - 24*3600;
			
		Иначе
			пДата = ТекущаяДатаСеанса();
			
		КонецЕсли;
		
	КонецЕсли; 
	
	// Текущий день не выгружаем, в файле должно быть 45 дат, потому берем 46 дней
	период45Дней = 24*3600*45;
	
	Если пОтДатыОкончания Тогда
		ПериодВыгрузки.ДатаОкончания = НачалоДня(пДата);
		ПериодВыгрузки.ДатаНачала = НачалоДня(пДата - период45Дней - 1); // -45 дней
		
	Иначе
		ПериодВыгрузки.ДатаНачала = НачалоДня(пДата);
		ПериодВыгрузки.ДатаОкончания = КонецДня(пДата + период45Дней + 1);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ВолшебныеЧислаДанных

#Область общ

// @ Клиент-сервер
//
// На основании процедуры модуля унсКлиент.ДобавитьЭлементОтбораКомпоновкиДанныхВКоллекцию
// Из работы Максима Зайцеа https://infostart.ru/1c/tools/93883/ 
// "Подсистема сохранения и восстановления настроек динамических списков"
Функция ОтборСКД_Копировать(пОтборПриемник, пОтборИсточник) Экспорт 
	
	пОтборПриемник.Элементы.Очистить(); 
	
	// Перенести элементы отбора в массив, чтобы с его помощью избавиться от рекурсивного обхода
	массивИсточника = Новый Массив;
	Для Каждого элементИсточника Из пОтборИсточник.Элементы Цикл
		// Соответствие хранит элемент и его родителя
		местоВставки = пОтборПриемник.Элементы;
		коллекцияЭлементИМестоВставки = ОтборСКД_коллекцияЭлементИМестоВставки(элементИсточника, местоВставки);
		массивИсточника.Добавить(коллекцияЭлементИМестоВставки);
		
	КонецЦикла;
	элементИсточника = Неопределено;
	
	Для Каждого коллекцияЭлементИМестоВставки Из массивИсточника Цикл
		Для Каждого пара Из коллекцияЭлементИМестоВставки Цикл
			элементИсточника = пара.Ключ;
			местоВставки = пара.Значение; 
			Прервать;
			
		КонецЦикла;
		пара = Неопределено;
		
		Если ТипЗнч(элементИсточника) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			новаяГруппаПриемника = местоВставки.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных") );
			ЗаполнитьЗначенияСвойств(новаяГруппаПриемника, элементИсточника);
			Для Каждого элементПотомок Из элементИсточника.Элементы Цикл
				коллекцияПотомокИРодитель = ОтборСКД_коллекцияЭлементИМестоВставки(элементПотомок, новаяГруппаПриемника.Элементы);
				массивИсточника.Добавить(коллекцияПотомокИРодитель);
				
			КонецЦикла;
			элементПотомок = Неопределено;
			
		Иначе // добавляем элемент отбора 
			новыйЭлементПриемника = местоВставки.Добавить( Тип("ЭлементОтбораКомпоновкиДанных") );
			ЗаполнитьЗначенияСвойств(новыйЭлементПриемника, элементИсточника );
			
		КонецЕсли;

	КонецЦикла; 
	коллекцияЭлементИМестоВставки = Неопределено;
	
КонецФункции

// Вспомогательная функция для методаОтборСКДКопировать
Функция ОтборСКД_коллекцияЭлементИМестоВставки(пЭлемент, пРодительЭлемента)
	
	описаниеЭлемента = Новый Соответствие;
	описаниеЭлемента.Вставить(пЭлемент, пРодительЭлемента);
	
	Возврат описаниеЭлемента;
	
КонецФункции

// Функция предназначена для вывода СКД в таблицу значений
// Используется, например, для использования отчета как источника данных
//
// Параметры:
//  пСхемаКомпоновкиДанных	 - СхемаКомпоновкиДанных - Схема, из которой необходимо получить таблицу значений
//  пНастройкиКД			 - НастройкиСхемыКомпоновкиДанных - суть в названии
// 
// Возвращаемое значение:
//  ТаблицаЗначений - результат компоновки СКД
//
Функция СКД_в_ТЗ(пСхемаКомпоновкиДанных, пНастройкиКД) Экспорт
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(пСхемаКомпоновкиДанных, пНастройкиКД,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	тзРезультат = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(тзРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Возврат тзРезультат;
	
КонецФункции

// ПреобразоватьТЗвТекстCSV() экспортирует данные ТЗ в текст в формате CSV
//
// Параметры:
//  пТЗ			 - 	ТаблицаЗначений - Обязательный, таблица значений, которую необходимо преобразовать в CSV
//  Разделитель	 - 	Строка - необязательный, разделитель полей CSV, по умолчанию ';'
//  пПараметры	 - 	Структура - необязательный, дополнительный параметры процедуры 
//					Возможные значения:
//						ВыводитьИменаКолонок - булево, признак необходимости в первой строке вывести имена колонок, по умолчанию Истина
//						ВосстановитьПробелыВИменахКолонок - булево, заменить символв '_' в именах колонок на пробел, по умолчанию Ложь;
//						ФорматДат - строка, форматная строка, которя будет использована для преобразования дат;
//
// Возвращаемое значение:
//  Строка - текст файла CSV
//
// Исходная процедура взята здесь: https://helpf.pro/faq8/view/1818.html
// 
Функция ТЗ_в_CSV(пТЗ, пРазделитель = ";", пПараметры = Неопределено) Экспорт
	
	#Область Инициализация
	
	Если ТипЗнч(пПараметры) <> Тип("Структура") Тогда
		пПараметры = Новый Структура;
		
	КонецЕсли;
	
	выводитьИменаКолонок = Истина;
	Если пПараметры.Свойство("ВыводитьИменаКолонок") Тогда
		выводитьИменаКолонок = пПараметры.ВыводитьИменаКолонок; 
		
	КонецЕсли;
	
	восстановитьПробелыВИменахКолонок = Ложь;
	Если пПараметры.Свойство("ВосстановитьПробелыВИменахКолонок") Тогда
		восстановитьПробелыВИменахКолонок = пПараметры.ВосстановитьПробелыВИменахКолонок;
		
	КонецЕсли; 
	
	форматДат = "";
	пПараметры.Свойство("ФорматДат", форматДат);
	
	#КонецОбласти // Инициализация
	
	массивСтрокCSV = Новый Массив;
		
	Если выводитьИменаКолонок Тогда
		//Если нужно выгружать наименование колонок Выгружаем
		именаКолонок = "";
		Для Каждого колонка Из пТЗ.Колонки Цикл
			имяКолонки = СокрЛП(колонка.Имя);
			Если восстановитьПробелыВИменахКолонок Тогда
				имяКолонки = СтрЗаменить(имяКолонки, "_", " ");
				
			КонецЕсли;
			
			именаКолонок = именаКолонок + имяКолонки + пРазделитель;
			
		КонецЦикла;
		колонка = Неопределено;
		
		именаКолонок = Лев(именаКолонок, СтрДлина(именаКолонок)-1);
		
		массивСтрокCSV.Добавить(именаКолонок);
		
	КонецЕсли; // Если выводитьИменаКолонко
	
	Для Каждого рядТЗ Из пТЗ Цикл
		массивПолейCSV = Новый Массив;
		
		Для Каждого колонка Из пТЗ.Колонки Цикл
			полеCSV = рядТЗ[колонка.Имя];
			
			Если ТипЗнч(полеCSV) = Тип("Дата") Тогда
				Если ЗначениеЗаполнено(форматДат) Тогда
					полеCSV = Формат(полеCSV, форматДат);
					
				Иначе
					полеCSV = XMLСтрока(полеCSV);
					
				КонецЕсли; 
				
			ИначеЕсли ТипЗнч(полеCSV) = Тип("Число") Тогда
				полеCSV = Формат(полеCSV, "ЧН=0; ЧГ=0");
				
			КонецЕсли;
			
			//по правилам CSV если поле содержит двойные ковычки они должны повторятся дважды
			Если Найти(полеCSV,"""") Тогда
				полеCSV = СтрЗаменить(полеCSV,"""","""""");
				
			КонецЕсли;
			
			//по правилам CSV если поле содержит перенос строки или запятую оно должно заключатся в двойные кавычки
			Если Найти(полеCSV, пРазделитель) ИЛИ Найти(полеCSV, Символы.ПС) ИЛИ Найти(полеCSV, """") Тогда
				полеCSV = """" + полеCSV + """";
				
			КонецЕсли;

			массивПолейCSV.Добавить(полеCSV);
			
		КонецЦикла; 
		колонка = Неопределено;
		
		строкаCSV = СтрСоединить(массивПолейCSV, пРазделитель);;
		
		массивСтрокCSV.Добавить(строкаCSV);
		
	КонецЦикла;
	рядТЗ = Неопределено; 
	
	стрCSV = СтрСоединить(массивСтрокCSV, Символы.ПС);

	Возврат стрCSV;

КонецФункции

// @ В Кэш 
Функция ЭтоФоновоеЗадание()
	
	текущийСеанс = ПолучитьТекущийСеансИнформационнойБазы();
	
	этоФоновое = текущийСеанс.ПолучитьФоновоеЗадание() <> Неопределено;
	
	Возврат этоФоновое;
	
КонецФункции

#КонецОбласти // общ  

#Область общ_Лишнее 

Процедура Запрос_ВременнаяТаблица_Уничтожить(пЗапрос, пНаименованиеВременнойТаблицы) Экспорт 
	
	мвт = Неопределено; 
	
	Если ТипЗнч(пЗапрос) = Тип("Запрос") Тогда
		мвт = пЗапрос.МенеджерВременныхТаблиц;
		
	ИначеЕсли ТипЗнч(пЗапрос) = Тип("МенеджерВременныхТаблиц") Тогда
		мвт = пЗапрос;
		
	КонецЕсли;

	Если ТипЗнч(мвт) <> Тип("МенеджерВременныхТаблиц") Тогда
		Возврат;
		
	КонецЕсли; 
	
	таблицаСуществует = мвт.Таблицы.Найти(пНаименованиеВременнойТаблицы) <> Неопределено;
	
	Если Не таблицаСуществует Тогда 
		Возврат;
		
	КонецЕсли; 
	
	запрос = Новый Запрос;
	запрос.Текст = СтрШаблон("УНИЧТОЖИТЬ %1", пНаименованиеВременнойТаблицы);
	запрос.Выполнить();	
	
КонецПроцедуры

 // На основании процедуры ПреобразоватьВидСравненияВСтрокуЗапроса 
// Модуля обработки Сергея Федосеева https://infostart.ru/1c/tools/1170873/
// "Преобразование объекта Отбор компоновки данных в Запрос"
Процедура Запрос_ДополнитьУсловияПоОтборуСКД(пЗапрос, пОтборСКД) Экспорт 
	
	//Если Ложь Тогда
	//	пЗапрос = Новый Запрос;
	//	
	//КонецЕсли;
	//
	//логическаяОперацияИ = "И";
	//началоГруппы = "_началоГруппы_";
	//конецГруппы = "_конецГруппы_";
	//увеличитьОтступ = "_увеличитьОтступ_";
	//уменьшитьОтступ = "_уменьшитьОтсутп_";
	//отступ = "";
	//
	//// Массив вместо рекурсии
	//массивЭлементовОтбора = Новый Массив;
	//сч = 0;
	//Для Каждого элементОтбора Из пОтборСКД.Элементы Цикл
	//	сч = сч + 1;
	//	Если сч > 1 Тогда
	//		массивЭлементовОтбора.Добавить(логическаяОперацияИ);
	//		массивЭлементовОтбора.Добавить(увеличитьОтступ);
	//		
	//	КонецЕсли;
	//	массивЭлементовОтбора.Добавить(элементОтбора); 
	//	
	//КонецЦикла;
	//элементОтбора = Неопределено; 
	//
	//текстУсловий = Новый ТекстовыйДокумент; 
	//сч = 0;
	//Для Каждого элементОтбора Из массивЭлементовОтбора Цикл
	//	сч = сч + 1;
	//	
	//	Если элементОтбора = увеличитьОтступ Тогда
	//		отступ = отступ + Символы.Таб;
	//		Продолжить;
	//		
	//	ИначеЕсли элементОтбора = уменьшитьОтступ Тогда
	//		отступ = Лев(отступ, СтрДлина(отступ) - 1);
	//		Продолжить;
	//		
	//	ИначеЕсли элементОтбора = началоГруппы Тогда
	//		текстУсловий.ДобавитьСтроку(отступ + "(");
	//		массивЭлементовОтбора.Вставить(сч, увеличитьОтступ); 
	//		Продолжить;
	//		
	//	ИначеЕсли элементОтбора = конецГруппы Тогда
	//		текстУсловий.ДобавитьСтроку(отступ + ")");
	//		массивЭлементовОтбора.Вставить(сч, уменьшитьОтступ);
	//		Продолжить;
	//		
	//	ИначеЕсли ТипЗнч(элементОтбора) = Тип("Строка") Тогда
	//		текстУсловий.ДобавитьСтроку(отступ + элементОтбора);
	//		Продолжить;
	//		
	//	ИначеЕсли ТипЗнч(элементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда // Это группа
	//		группаОтбора = элементОтбора;
	//		массивЭлементовГруппы = Новый Массив;
	//		
	//		логическаяОперацияВГруппе = "И";
	//		Если группаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ Тогда
	//			логическаяОперацияВГруппе = "И";
	//		ИначеЕсли группаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда
	//			логическаяОперацияВГруппе = "ИЛИ";
	//		ИначеЕсли группаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
	//			массивЭлементовГруппы.Добавить("НЕ");
	//			логическаяОперацияВГруппе = "И";
	//		КонецЕсли;
	//		
	//		массивЭлементовГруппы.Добавить(началоГруппы);
	//		Для Каждого потомок Из группаОтбора.Элементы Цикл
	//			индексПотомка = группаОтбора.Индекс(потомок);
	//			Если индексПотомка > 0 Тогда
	//				массивЭлементовГруппы.Добавить(логическаяОперацияВГруппе);
	//				
	//			КонецЕсли;
	//			массивЭлементовГруппы.Добавить(потомок);
	//		КонецЦикла;
	//		потомок = Неопределено;
	//		массивЭлементовГруппы.Добавить(конецГруппы);
	//		
	//		// Вставить элементы массива группы в основной массивЭлементовОтбора
	//		счЭлементовГруппы = 0;
	//		Для Каждого элементГруппы Из массивЭлементовГруппы Цикл
	//			счЭлементовГруппы = счЭлементовГруппы + 1; 
	//			массивЭлементовОтбора.Вставить(сч + счЭлементовГруппы, элементГруппы);
	//			
	//		КонецЦикла;
	//		элементГруппы = Неопределено;
	//		
	//		Продолжить;
	//		
	//	КонецЕсли; // Если элементОтбора = ...
	//	
	//	имяПараметра = "_п" + Формат(пЗапрос.Параметры.Количество() + 1, "ЧДЦ=0; ЧГ=0");
	//	// + Конвертация типов
	//	значениеПараметра = Неопределено;
	//	Если ТипЗнч(пЭлементОтбора.ПравоеЗначение) = Тип("СтандартнаяДатаНачала") Тогда
	//		значениеПараметра = Дата(пЭлементОтбора.ПравоеЗначение);
	//		
	//	Иначе
	//		значениеПараметра = элементОтбора.ПравоеЗначение;
	//		
	//	КонецЕсли;
	//	// - Конвертация типов 
	//	пЗапрос.УстановитьПараметр(имяПараметра, значениеПараметра);
	//	
	//	стрШаблонУсловия = "Истина";
	//	// Плейсхолдеры
	//	// %1 - левое значение отбора
	//	// %2 - имя параметра
	//	Если  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
	//		стрШаблонУсловия = "%1 > &%2";
	//		
	//	ИначеЕсли  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
	//		стрШаблонУсловия = "%1 >= &%2";
	//		
	//	ИначеЕсли  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
	//		стрШаблонУсловия = "%1 В ИЕРАРХИИ (&%2)";

	//	ИначеЕсли  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
	//		стрШаблонУсловия = "%1 В (&%2)";

	//	ИначеЕсли  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
	//		стрШаблонУсловия = "%1 В ИЕРАРХИИ (&%2)";

	//	ИначеЕсли  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено
	//		Или пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено
	//	Тогда
	//		стрШаблонУсловия = "(%1 Есть Null ИЛИ %1 = Неопределено ИЛИ %1 = 0 ИЛИ %1 = """" ИЛИ %1 = ДАТАВРЕМЯ(1, 1, 1))";
	//		Если пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
	//			стрШаблонУсловия = "НЕ " + стрШаблонУсловия;
	//			
	//		КонецЕсли;

	//	ИначеЕсли  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
	//		стрШаблонУсловия = "%1 < &%2";

	//	ИначеЕсли  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
	//		стрШаблонУсловия = "%1 <= &%2";

	//	ИначеЕсли  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НачинаетсяС Тогда
	//		стрШаблонУсловия = "%1 Подобно &%2";

	//	ИначеЕсли  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеНачинаетсяС Тогда
	//		стрШаблонУсловия = "%1 НЕ Подобно &%2";

	//	ИначеЕсли  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
	//		стрШаблонУсловия = "НЕ %1 В ИЕРАРХИИ (&%2)";

	//	ИначеЕсли  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
	//		стрШаблонУсловия = "НЕ %1 В (&%2)";

	//	ИначеЕсли  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
	//		стрШаблонУсловия = "НЕ %1 В ИЕРАРХИИ (&%2)";

	//	ИначеЕсли  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Подобно Тогда    
	//		стрУсловие = Строка(пЭлементОтбора.ЛевоеЗначение) + " Подобно &" + имяПараметра;

	//	ИначеЕсли  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеПодобно Тогда    
	//		стрУсловие = Строка(пЭлементОтбора.ЛевоеЗначение) + " Не Подобно &" + имяПараметра;

	//	ИначеЕсли  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
	//		стрУсловие = Строка(пЭлементОтбора.ЛевоеЗначение) + " <> &" + имяПараметра  + "  ";
	//		Если ТИПЗНЧ(пЭлементОтбора.ПравоеЗначение) = ТИП("Строка") Тогда
	//			стрУсловие = "НЕ " + Строка(пЭлементОтбора.ЛевоеЗначение) + " ПОДОБНО &" + имяПараметра  + "  ";
	//		КонецЕсли;		

	//	ИначеЕсли  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
	//		стрУсловие = "НЕ " + Строка(пЭлементОтбора.ЛевоеЗначение) + " ПОДОБНО  ""%""+&" + имяПараметра  + "+ ""%""  ";

	//	ИначеЕсли  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
	//		стрУсловие = Строка(пЭлементОтбора.ЛевоеЗначение) + " =  &" + имяПараметра;

	//	ИначеЕсли  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит Тогда
	//		стрУсловие = Строка(пЭлементОтбора.ЛевоеЗначение) + " ПОДОБНО ""%""+&" + имяПараметра  + "+ ""%""  ";

	//	Иначе
	//		стрУсловие = "Истина // Не удалось сконвертироватьэлемент отбора";
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//элементОтбора = Неопределено;
	
КонецПроцедуры // Запрос_ДополнитьУсловияПоОтборуСКД

Функция Запрос_Условие_ИзЭлементаОтбораСКД(пЭлементОтбора, пЗапрос, пЛогическаяОперация = "")
	
	// Для контекстной подскакзки
	Если Ложь Тогда
		пЗапрос = Новый Запрос;
		
	КонецЕсли;
	
	стрРезультат = "";
	
	Если НЕ пЭлементОтбора.Использование Тогда
		стрРезультат = пЛогическаяОперация + " Истина // ЭлементОтбора.Использование = Ложь";
		Возврат стрРезультат;
		
	КонецЕсли;
	
	Если ТипЗнч(пЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		логическаяОперацияВГруппе = "";
		Если пЭлементОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ Тогда
			логическаяОперацияВГруппе = "И";
		ИначеЕсли пЭлементОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда
			логическаяОперацияВГруппе = "ИЛИ";
		ИначеЕсли пЭлементОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
			логическаяОперацияВГруппе = "И";
		КонецЕсли;
		
		Если пЭлементОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
			стрРезультат = Символы.ПС + ?(пЗапрос.Параметры.Количество() > 0, "И НЕ", "НЕ") + " (" + Символы.ПС + "// + Это группа элементов отбора" + Символы.ПС;
		Иначе
			стрРезультат = Символы.ПС + пЛогическаяОперация + " (" + Символы.ПС + "// + Это группа элементов отбора" + Символы.ПС;
		КонецЕсли;
		
		Для Каждого потомок Из пЭлементОтбора.Элементы Цикл
			Если пЭлементОтбора.Элементы.Индекс(потомок) > 0 Тогда
				стрРезультат = стрРезультат + Запрос_Условие_ИзЭлементаОтбораСКД(потомок, пЗапрос, логическаяОперацияВГруппе);
			Иначе
				стрРезультат = стрРезультат + Запрос_Условие_ИзЭлементаОтбораСКД(потомок, пЗапрос);
			КонецЕсли;
			
		КонецЦикла;
		потомок = Неопределено;
		
		стрРезультат = стрРезультат + Символы.ПС + "// - Это группа элементов отбора" + Символы.ПС + ")";
		
		Возврат стрРезультат;
		
	КонецЕсли;
	
	ИмяПараметра = "П" + Формат(пЗапрос.Параметры.Количество() + 1, "ЧДЦ=0; ЧГ=0");
	// + Конвертация типов
	Если ТипЗнч(пЭлементОтбора.ПравоеЗначение) = Тип("СтандартнаяДатаНачала") Тогда
		пЭлементОтбора.ПравоеЗначение = Дата(пЭлементОтбора.ПравоеЗначение);
	КонецЕсли;
	// - Конвертация типов
	Если  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
		стрРезультат = Строка(пЭлементОтбора.ЛевоеЗначение) + " > &" + ИмяПараметра;
		Если пЗапрос <> Неопределено Тогда
			пЗапрос.УстановитьПараметр(ИмяПараметра, пЭлементОтбора.ПравоеЗначение);
		КонецЕсли;
	ИначеЕсли  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
		стрРезультат = Строка(пЭлементОтбора.ЛевоеЗначение) + " >= &" + ИмяПараметра  + "  ";
		Если пЗапрос <> Неопределено Тогда              
			пЗапрос.УстановитьПараметр(ИмяПараметра, пЭлементОтбора.ПравоеЗначение);
		КонецЕсли;
	ИначеЕсли  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
		стрРезультат = Строка(пЭлементОтбора.ЛевоеЗначение) + " В ИЕРАРХИИ (&" + ИмяПараметра + ") ";
		Если пЗапрос <> Неопределено Тогда              
			пЗапрос.УстановитьПараметр(ИмяПараметра,пЭлементОтбора.ПравоеЗначение);
		КонецЕсли;
	ИначеЕсли  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
		стрРезультат = Строка(пЭлементОтбора.ЛевоеЗначение) + " В (&" + ИмяПараметра + ") ";
		Если пЗапрос <> Неопределено Тогда              
			пЗапрос.УстановитьПараметр(ИмяПараметра,пЭлементОтбора.ПравоеЗначение);
		КонецЕсли;
	ИначеЕсли  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда    
		стрРезультат = Строка(пЭлементОтбора.ЛевоеЗначение) + " В ИЕРАРХИИ (&" + ИмяПараметра + ") ";
		Если пЗапрос <> Неопределено Тогда              
			пЗапрос.УстановитьПараметр(ИмяПараметра,пЭлементОтбора.ПравоеЗначение);
		КонецЕсли;
		
		
		// заполнено		
	ИначеЕсли  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Тогда    
		стрРезультат = " НЕ (" + Строка(пЭлементОтбора.ЛевоеЗначение) + " Есть Null ИЛИ " + Строка(пЭлементОтбора.ЛевоеЗначение) + " = 0 ИЛИ " + Строка(пЭлементОтбора.ЛевоеЗначение) + " = " + Символ(34) + Символ(34) + " ИЛИ " + Строка(пЭлементОтбора.ЛевоеЗначение) + " = ДАТАВРЕМЯ(1, 1, 1))";
		// Такие параметры не создавать и не нумеровать в исходной процедуре!		
		// Не заполнено		
	ИначеЕсли  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда    
		стрРезультат = " (" + Строка(пЭлементОтбора.ЛевоеЗначение) + " Есть Null ИЛИ " + Строка(пЭлементОтбора.ЛевоеЗначение) + " = 0 ИЛИ " + Строка(пЭлементОтбора.ЛевоеЗначение) + " = " + Символ(34) + Символ(34)+ " ИЛИ " + Строка(пЭлементОтбора.ЛевоеЗначение) + " = ДАТАВРЕМЯ(1, 1, 1))";
		// Такие параметры не создавать и не нумеровать в исходной процедуре!		
		
	ИначеЕсли  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
		стрРезультат = Строка(пЭлементОтбора.ЛевоеЗначение) + " < &" + ИмяПараметра  + "  ";
		Если пЗапрос <> Неопределено Тогда              
			пЗапрос.УстановитьПараметр(ИмяПараметра, пЭлементОтбора.ПравоеЗначение);
		КонецЕсли;
	ИначеЕсли  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
		стрРезультат = Строка(пЭлементОтбора.ЛевоеЗначение) + " <= &" + ИмяПараметра  + "  ";
		Если пЗапрос <> Неопределено Тогда              
			пЗапрос.УстановитьПараметр(ИмяПараметра, пЭлементОтбора.ПравоеЗначение);
		КонецЕсли;
	ИначеЕсли  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НачинаетсяС Тогда    
		стрРезультат = Строка(пЭлементОтбора.ЛевоеЗначение) + " Подобно &" + ИмяПараметра;
		Если пЗапрос <> Неопределено Тогда              
			пЗапрос.УстановитьПараметр(ИмяПараметра, пЭлементОтбора.ПравоеЗначение + "%");
		КонецЕсли;
	ИначеЕсли  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеНачинаетсяС Тогда    
		стрРезультат = Строка(пЭлементОтбора.ЛевоеЗначение) + " НЕ Подобно &" + ИмяПараметра;
		Если пЗапрос <> Неопределено Тогда              
			пЗапрос.УстановитьПараметр(ИмяПараметра, пЭлементОтбора.ПравоеЗначение + "%");
		КонецЕсли;		
	ИначеЕсли  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
		стрРезультат = "НЕ " + Строка(пЭлементОтбора.ЛевоеЗначение) + " В ИЕРАРХИИ (&" + ИмяПараметра + ") ";
		Если пЗапрос <> Неопределено Тогда              
			пЗапрос.УстановитьПараметр(ИмяПараметра, пЭлементОтбора.ПравоеЗначение);
		КонецЕсли;
	ИначеЕсли  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		стрРезультат = "НЕ " + пЭлементОтбора.ЛевоеЗначение + " В (&" + ИмяПараметра + ") ";
		Если пЗапрос <> Неопределено Тогда              
			пЗапрос.УстановитьПараметр(ИмяПараметра,пЭлементОтбора.ПравоеЗначение);
		КонецЕсли;
	ИначеЕсли  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		стрРезультат = "НЕ " + Строка(пЭлементОтбора.ЛевоеЗначение) + " В ИЕРАРХИИ (&" + ИмяПараметра + ") ";
		Если пЗапрос <> Неопределено Тогда              
			пЗапрос.УстановитьПараметр(ИмяПараметра,пЭлементОтбора.ПравоеЗначение);
		КонецЕсли;
	ИначеЕсли  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Подобно Тогда    
		стрРезультат = Строка(пЭлементОтбора.ЛевоеЗначение) + " Подобно &" + ИмяПараметра;
		Если пЗапрос <> Неопределено Тогда              
			пЗапрос.УстановитьПараметр(ИмяПараметра, "%" + пЭлементОтбора.ПравоеЗначение + "%");
		КонецЕсли;
	ИначеЕсли  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеПодобно Тогда    
		стрРезультат = Строка(пЭлементОтбора.ЛевоеЗначение) + " Не Подобно &" + ИмяПараметра;
		Если пЗапрос <> Неопределено Тогда              
			пЗапрос.УстановитьПараметр(ИмяПараметра, "%" + пЭлементОтбора.ПравоеЗначение + "%");
		КонецЕсли;		
	ИначеЕсли  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
		стрРезультат = Строка(пЭлементОтбора.ЛевоеЗначение) + " <> &" + ИмяПараметра  + "  ";
		Если ТИПЗНЧ(пЭлементОтбора.ПравоеЗначение) = ТИП("Строка") Тогда
			стрРезультат = "НЕ " + Строка(пЭлементОтбора.ЛевоеЗначение) + " ПОДОБНО &" + ИмяПараметра  + "  ";
		КонецЕсли;		
		Если пЗапрос <> Неопределено Тогда              
			пЗапрос.УстановитьПараметр(ИмяПараметра,пЭлементОтбора.ПравоеЗначение);
		КонецЕсли;		
	ИначеЕсли  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
		стрРезультат = "НЕ " + Строка(пЭлементОтбора.ЛевоеЗначение) + " ПОДОБНО  ""%""+&" + ИмяПараметра  + "+ ""%""  ";
		Если пЗапрос <> Неопределено Тогда              
			пЗапрос.УстановитьПараметр(ИмяПараметра,пЭлементОтбора.ПравоеЗначение);
		КонецЕсли;
	ИначеЕсли  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
		стрРезультат = Строка(пЭлементОтбора.ЛевоеЗначение) + " =  &" + ИмяПараметра;
		Если пЗапрос <> Неопределено Тогда              
			пЗапрос.УстановитьПараметр(ИмяПараметра,пЭлементОтбора.ПравоеЗначение);
		КонецЕсли;
	ИначеЕсли  пЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит Тогда
		стрРезультат = Строка(пЭлементОтбора.ЛевоеЗначение) + " ПОДОБНО ""%""+&" + ИмяПараметра  + "+ ""%""  ";
		Если пЗапрос <> Неопределено Тогда              
			пЗапрос.УстановитьПараметр(ИмяПараметра,пЭлементОтбора.ПравоеЗначение);
		КонецЕсли;
	Иначе
		а = "Не удалось сконвертировать элемент отбора";
	КонецЕсли;
	Возврат  пЛогическаяОперация + " " + стрРезультат;
КонецФункции // ПреобразоватьВидСравненияВСтрокуЗапроса()

// Функция добавляет в запрос условие на таблицу в секцию запроса ГДЕ
// Условие добавляется через объектную модель запроса.
// Необходимо для программной модификации текстов запросов, например,
// централизованной установки условий при "Дурацком РЛС".
//
// Параметры:
//  пТекстЗапроса	 - Строка - Текст запроса, который необходимо модифицировать 
//  пИмяТаблицы		 - Строка - Имя таблицы, для которой необходимо добавить условие
//  пСтрУсловия		 - Строка - Логическое условие, которое буде помещено в секцию "ГДЕ" запроса
// 
// Возвращаемое значение:
// Строка  - Модифицированный текст запроса 
//
// 20240204 Заяш 
//
Функция Запрос_ДобавитьУсловиеНаТаблицу(пТекстЗапроса, пИмяТаблицы, пСтрУсловия) Экспорт
	
	схемаЗапроса = Новый СхемаЗапроса;
	схемаЗапроса.УстановитьТекстЗапроса(пТекстЗапроса);
	
	Для Каждого запросСхемыЗапроса Из схемаЗапроса.ПакетЗапросов Цикл  
		Для Каждого операторВыбратьСхемыЗапроса Из запросСхемыЗапроса.Операторы Цикл 
			Для Каждого источникСхемыЗапроса Из операторВыбратьСхемыЗапроса.Источники Цикл
				Если 
					ТипЗнч(источникСхемыЗапроса.Источник) <> Тип("ТаблицаСхемыЗапроса") 
					Или источникСхемыЗапроса.Источник.ИмяТаблицы <> пИмяТаблицы 
				Тогда
					Продолжить;
					
				КонецЕсли;
				
				выражение = операторВыбратьСхемыЗапроса.Отбор.Найти(пСтрУсловия);
				Если выражение = Неопределено Тогда
					операторВыбратьСхемыЗапроса.Отбор.Добавить(пСтрУсловия); 
					
				КонецЕсли;
				
			КонецЦикла;
			источникСхемыЗапроса = Неопределено;
			
		КонецЦикла;
		операторВыбратьСхемыЗапроса = Неопределено;
		
	КонецЦикла;
	запросСхемыЗапроса = Неопределено;
	
	Возврат схемаЗапроса.ПолучитьТекстЗапроса();  
	
КонецФункции

Функция НеРеализовано()
	
	ВызватьИсключение "Не реализовано";
	
КонецФункции 

// @ Клиент-сервер
//
// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров
// начинается с единицы.
//
// Функция устарела, т.к. есть функция глобального контекста СтрШаблон 
// но ее можно использовать, когда в параметре пШаблон нет плейсхолдера для одноо из параметров
// наппример СтрШаблон("шаблон без плейсхолдера", "значение для подстановки") упадет с ошибкой
// а Строка_Шаблон("шаблон без плейсхолдера", "значение для подстановки") отработает
//
// Параметры
//  СтрокаПодстановки  – Строка – шаблон строки с параметрами (вхождениями вида "%ИмяПараметра").
// Параметр<n>         - Строка - параметр
// Возвращаемое значение:
//   Строка   – текстовая строка с подставленными параметрами
//
// Пример:
// Строка = Строка_ПодставитьПараметры(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк");
//
// 20110723 Взято из БСП 
// 20240325 Переменована из Строка_ПодставитьПараметры в Строка_Шаблон
//
Функция Строка_Шаблон( Знач пШаблон,
									Знач п1 = Неопределено,
									Знач п2 = Неопределено,
									Знач п3 = Неопределено,
									Знач п4 = Неопределено,
									Знач п5 = Неопределено,
									Знач п6 = Неопределено,
									Знач п7 = Неопределено,
									Знач п8 = Неопределено,
									Знач п9 = Неопределено) Экспорт
	
	Если пШаблон = Неопределено ИЛИ СтрДлина(пШаблон) = 0 Тогда
		Возврат "";
	КонецЕсли; 
	
	// Если нет плейсхолдеров, вернуть шаблон как есть
	Если СтрНайти(пШаблон, "%") = 0 Тогда
		Возврат пШаблон;
		
	КонецЕсли;
	
	Результат = "";
	НачПозиция = 1;
	Позиция = 1;
	Пока Позиция <= СтрДлина(пШаблон) Цикл
		СимволСтроки = Сред(пШаблон, Позиция, 1);
		Если СимволСтроки <> "%" Тогда
			Позиция = Позиция + 1;
			Продолжить;
		КонецЕсли;
		Результат = Результат + Сред(пШаблон, НачПозиция, Позиция - НачПозиция);
		Позиция = Позиция + 1;
		СимволСтроки = Сред(пШаблон, Позиция, 1);
		
		Если СимволСтроки = "%" Тогда
			Позиция = Позиция + 1;
			НачПозиция = Позиция;
			Продолжить;
		КонецЕсли;
		
		Попытка
			НомерПараметра = Число(СимволСтроки);
		Исключение
			ВызватьИсключение НСтр("ru='Входная строка СтрокаПодстановки имеет неверный формат: %'" + СимволСтроки);
		КонецПопытки;
		
		Если СимволСтроки = "1" Тогда
			ЗначениеПараметра = п1;
		ИначеЕсли СимволСтроки = "2" Тогда
			ЗначениеПараметра = п2;
		ИначеЕсли СимволСтроки = "3" Тогда
			ЗначениеПараметра = п3;
		ИначеЕсли СимволСтроки = "4" Тогда
			ЗначениеПараметра = п4;
		ИначеЕсли СимволСтроки = "5" Тогда
			ЗначениеПараметра = п5;
		ИначеЕсли СимволСтроки = "6" Тогда
			ЗначениеПараметра = п6;
		ИначеЕсли СимволСтроки = "7" Тогда
			ЗначениеПараметра = п7;
		ИначеЕсли СимволСтроки = "8" Тогда
			ЗначениеПараметра = п8;
		ИначеЕсли СимволСтроки = "9" Тогда
			ЗначениеПараметра = п9;
		Иначе
			ВызватьИсключение НСтр("ru='Входная строка СтрокаПодстановки имеет неверный формат: %'" + ЗначениеПараметра);
		КонецЕсли;
		
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = "";
			
		Иначе
			Попытка
				ЗначениеПараметра = Строка(ЗначениеПараметра);
			Исключение
				ЗначениеПараметра = Строка(ТипЗнч(ЗначениеПараметра));
			КонецПопытки;
			
		КонецЕсли;
		
		Результат = Результат + ЗначениеПараметра;
		
		Позиция = Позиция + 1;
		
		НачПозиция = Позиция;
	
	КонецЦикла;
	
	Если (НачПозиция <= СтрДлина(пШаблон)) Тогда
		Результат = Результат + Сред(пШаблон, НачПозиция, СтрДлина(пШаблон) - НачПозиция + 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти // Лишнее
